#!/usr/bin/env csi -s

(require-library amb-eval)
(import amb-eval)

(define the-global-environment (setup-environment))

(define input-prompt ";;; Amb-Eval input:")

(define output-prompt ";;; Amb-Eval value:")

(define (prompt-for-input string)
  (newline) (newline) (display string) (newline))

(define (announce-output string)
  (newline) (display string) (newline))

(define (user-print obj)
  (if (compound-procedure? obj)
      (display (list 'compound-procedure
                     (procedure-params obj)
                     (procedure-body obj)
                     '<procedure-env>))
      (display obj)))

(define (driver-loop)
  (define (internal-loop try-again)
    (prompt-for-input input-prompt)
    (let ((input (read)))
      (if (eq? input 'try-again) (try-again)
          (begin
            (newline)
            (display ";;; Startinga new problem ")
            (eval input
                  the-global-environment
                  (lambda (val next-alt)
                    (announce-output output-prompt)
                    (user-print val)
                    (internal-loop next-alt))
                  (lambda ()
                    (announce-output ";;; There are no more values of")
                    (user-print input)
                    (driver-loop)))))))
  (internal-loop
   (lambda ()
     (newline)
     (display ";;; There is no current problem")
     (driver-loop))))

(driver-loop)
